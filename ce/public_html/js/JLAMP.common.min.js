var JLAMP = JLAMP || {};
JLAMP.common = {
    version: "2018.1.001", getDeviceType: function () {
        var a = JLAMP.getCookie("DeviceType");
        var b;
        if (!a) {
            b = JLAMP.deviceType.PC
        } else {
            if (a === JLAMP.deviceType.Mobile) {
                b = JLAMP.deviceType.Mobile
            } else {
                b = JLAMP.deviceType.Tablet
            }
        }
        return b
    }, getDevicePlatform: function () {
        var a = JLAMP.getCookie("DevicePlatform");
        var b;
        if (!a) {
            b = JLAMP.devicePlatform.Web
        } else {
            if (a === JLAMP.devicePlatform.iOS) {
                b = JLAMP.devicePlatform.iOS
            } else {
                b = JLAMP.devicePlatform.Android
            }
        }
        return b
    }, getLangID: function () {
        return jq("[j-layout-langid]").val()
    }, isID: function (b, f, d) {
        var c = new RegExp("[a-zA-Z][0-9a-zA-Z_]{" + f + "," + d + "}$", "g");
        var a = b.match(c);
        if (a && a[0].length == b.length) {
            return true
        }
        return false
    }, isCompany: function (b) {
        var a = b.match(/[a-zA-Z0-9ㄱ-ㅎ가-힣() ]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isName: function (b) {
        var a = b.match(/[a-zA-Zㄱ-ㅎ가-힣]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isAlpha: function (b) {
        var a = b.match(/[a-z|A-Z]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isNumber: function (b) {
        var a = b.match(/[0-9]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isDate: function (a) {
        if ((/[0-9]{4}-[0-9]{2}-[0-9]{2}/).test(a)) {
            return true
        }
        return false
    }, isEmail: function (a) {
        if ((/[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i).test(a)) {
            return true
        }
        return false
    }, isHangul: function (b) {
        var a = b.match(/[ㄱ-ㅎ가-힣]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isHanja: function (b) {
        var a = b.match(/[\u4E00-\u9FD5]/g);
        if (a && a.length == b.length) {
            return true
        }
        return false
    }, isSpecialChar: function (d) {
        var f = "";
        var b = "[a-zA-Z0-9ㄱ-ㅎ가-힣";
        var a = "]";
        var g = "";
        if (typeof d === "object") {
            g = jq(d.obj).val();
            if (d.allowSC) {
                b += ",.?!@#$%^&*(){}_=+~※★■▶♣"
            }
            if (d.br) {
                b += "\\n"
            }
            if (d.space) {
                b += " "
            }
            f = b + a
        } else {
            g = d
        }
        var e = new RegExp(f, "g");
        var c = g.match(e);
        if (c && c.length == g.length) {
            return false
        }
        return true
    }, repNumberKey: function (a, b) {
        if (typeof a === "object") {
            if (jq(a).val()) {
                if (!this.isNumber(jq(a).val())) {
                    if (b) {
                        alert(b)
                    }
                    jq(a).val(this.repNumberKey(jq(a).val()))
                }
            } else {
                jq(a).val("")
            }
        } else {
            return a.replace(/[^0-9]/g, "")
        }
    }, repRemoveSpecialChar: function (c) {
        var e = "";
        var b = "[^a-zA-Z0-9ㄱ-ㅎ가-힣";
        var a = "]";
        var f = "";
        if (typeof c === "object") {
            f = c.value;
            if (c.allowSC) {
                b += ",.?!@#$%^&*(){}_=+~※★■▶♣"
            }
            if (c.br) {
                b += "\\n"
            }
            if (c.space) {
                b += " "
            }
        } else {
            f = c
        }
        e = b + a;
        var d = new RegExp(e, "g");
        return f.replace(d, "")
    }, repSpecialChar: function (a, c) {
        if (typeof a === "object" && typeof a.obj === "object") {
            if (jq(a.obj).val()) {
                if (this.isSpecialChar(a)) {
                    if (c) {
                        alert(c)
                    }
                    var b = Object.assign({}, a);
                    b.value = jq(b.obj).val();
                    delete b.obj;
                    jq(a.obj).val(this.repSpecialChar(b))
                }
            } else {
                jq(a.obj).val("")
            }
        } else {
            return this.repRemoveSpecialChar(a)
        }
    }, repCompany: function (a, b) {
        if (typeof a === "string") {
            return a.replace(/[^a-zA-Z0-9ㄱ-ㅎ가-힣() ]/g, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!this.isCompany(jq(a).val())) {
                        if (b) {
                            alert(b)
                        }
                        jq(a).val(this.repCompany(jq(a).val()))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, repName: function (a, b) {
        if (typeof a === "string") {
            return a.replace(/[^a-zA-Zㄱ-ㅎ가-힣]/g, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!this.isName(jq(a).val())) {
                        if (b) {
                            alert(b)
                        }
                        jq(a).val(this.repName(jq(a).val()))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, repAlpha: function (a, b) {
        if (typeof a === "string") {
            return a.replace(/[^a-z|A-Z]/gi, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!JLAMP.common.isAlpha(jq(a).val())) {
                        if (b) {
                            alert(b)
                        }
                        jq(a).val(this.repAlpha(jq(a).val()))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, repHangul: function (a, b) {
        if (typeof a === "string") {
            return a.replace(/[^ㄱ-ㅎ가-힣]/gi, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!JLAMP.common.isHangul(jq(a).val())) {
                        if (b) {
                            alert(b)
                        }
                        jq(a).val(JLAMP.common.repHangul(jq(a).val()))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, repHanja: function (a, b) {
        if (typeof a === "string") {
            return a.replace(/[^\u4E00-\u9FD5]/g, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!JLAMP.common.isHanja(jq(a).val())) {
                        if (b) {
                            alert(b)
                        }
                        jq(a).val(JLAMP.common.repHanja(jq(a).val()))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, repID: function (a, f, c, d) {
        if (typeof a === "string") {
            var b = new RegExp("^[0-9]*|[^0-9a-zA-Z_]", "g");
            a = a.replace(b, "");
            return a.replace(b, "")
        } else {
            if (typeof a === "object") {
                if (jq(a).val()) {
                    if (!JLAMP.common.isID(jq(a).val(), f, c)) {
                        if (d) {
                            alert(d)
                        }
                        jq(a).val(JLAMP.common.repID(jq(a).val()).substr(0, c))
                    }
                } else {
                    jq(a).val("")
                }
            }
        }
    }, decimalFormat: function (a, c) {
        try {
            a = parseFloat(a)
        } catch (b) {
            console.log("decimalFormat Function - " + b.message);
            throw b
        }
        return a.toFixed(c)
    }, currencyFormat: function (a, c) {
        if (a) {
            if (c === undefined || c < 0) {
                c = 0
            }
            var b = parseFloat(a);
            return b.toLocaleString("ko-KR", {minimumFractionDigits: c, maximumFractionDigits: c})
        } else {
            return 0
        }
    }, currencyFormatOld: function (d) {
        if (d) {
            if (!isNaN(d)) {
                d = d.toString()
            }
            var e = parseInt(parseInt(d.length - 1) / 3);
            var c = "", b = "";
            for (var a = d.length - 1; a >= 0; a--) {
                if (parseFloat(parseInt(d.length - a) % 3) == 0) {
                    if (e > 0) {
                        c += d.charAt(a) + ",";
                        e--
                    } else {
                        c += d.charAt(a)
                    }
                } else {
                    c += d.charAt(a)
                }
            }
            for (var a = c.length - 1; a >= 0; a--) {
                b += c.charAt(a)
            }
            return b
        } else {
            return 0
        }
    }, replaceAll: function (a, c, b) {
        return a.split(c).join(b)
    }, loading: function (a, b) {
        jq(a).waitMe({
            effect: b,
            text: "Please wait...",
            bg: "rgba(255,255,255,0.7)",
            color: "#000",
            sizeW: "",
            sizeH: "",
            source: "img.svg",
            onClose: function () {
            }
        })
    }, loadingClose: function (a) {
        jq(a).waitMe("hide")
    }, htmlRemove: function (a) {
        return a.replace(/(<([^>]+)>)/gi, "")
    }, guid: function () {
        function a() {
            return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1)
        }

        return a() + a() + "-" + a() + "-" + a() + "-" + a() + "-" + a() + a() + a()
    }, mergeRows: function (e, c, b) {
        var f = 1.5;
        var a = 2.36;
        var i = null;
        var j = null;
        var d = null;
        var g = null;
        if (!isNaN(c)) {
            var h = 0;
            jq(e + " > tbody > tr").each(function () {
                if (c == 0) {
                    i = jq(this).find("td:nth-child(1)")
                } else {
                    i = jq(this).find("td:nth-child(" + c + ")")
                }
                if (i.attr("rowspan")) {
                    h = 0;
                    j = null;
                    d = null;
                    g = null
                }
                if (c == 0 || h == 0) {
                    d = jq(this).find("td:nth-child(" + (b) + ")")
                } else {
                    d = jq(this).find("td:nth-child(" + (b - 1) + ")")
                }
                if (g != null && i.text() != g.text() && j.text() != d.text()) {
                    h = 0
                }
                if (j == null) {
                    j = d
                } else {
                    if (c == 0) {
                        if (j.text() == d.text()) {
                            d.remove();
                            g = j.closest("tr").find("td:nth-child(1)");
                            j.attr("rowspan", typeof j.attr("rowspan") == "undefined" ? 2 : (parseInt(j.attr("rowspan")) + 1));
                            var k = (j.attr("rowspan") - 1) * a;
                            j.css("height", (f + k) + "em");
                            j.css("border-bottom", "1px solid #e4e3e4")
                        } else {
                            j = d;
                            g = null
                        }
                    } else {
                        if (jq(j).parent().children().length != jq(d).parent().children().length) {
                            if (j.text() == d.text()) {
                                d.remove();
                                g = j.closest("tr").find("td:nth-child(1)");
                                j.attr("rowspan", typeof j.attr("rowspan") == "undefined" ? 2 : (parseInt(j.attr("rowspan")) + 1));
                                var k = (j.attr("rowspan") - 1) * a;
                                j.css("height", (f + k) + "em");
                                j.css("border-bottom", "1px solid #e4e3e4")
                            }
                        } else {
                            if (jq(g).parent().children().length != jq(d).parent().children().length) {
                                if (g != null && g.text() == d.text() && j.text() == d.text()) {
                                    d.remove();
                                    g = j.closest("tr").find("td:nth-child(1)");
                                    j.attr("rowspan", typeof j.attr("rowspan") == "undefined" ? 2 : (parseInt(j.attr("rowspan")) + 1));
                                    var k = (j.attr("rowspan") - 1) * a;
                                    j.css("height", (f + k) + "em");
                                    j.css("border-bottom", "1px solid #e4e3e4")
                                } else {
                                    j = d;
                                    g = j.closest("tr").find("td:nth-child(1)")
                                }
                            }
                        }
                    }
                }
                h++
            })
        }
    }, mergeRowsSum: function (a, e, g) {
        if (!isNaN(e) && !isNaN(g)) {
            var f = 0;
            var b = 0;
            var d = 0;
            var c = 0;
            jq("#" + a + " > .k-grid-content > table > tbody > tr").each(function () {
                if (parseInt(b) >= parseInt(f)) {
                    f = jq(this).find("td:nth-child(" + e + ")").attr("rowspan");
                    if (!f) {
                        f = 0
                    }
                    b = 0
                }
                if (b === 0) {
                    if (jq(this).find("td:nth-child(" + g + ")")) {
                        c = jq(this).find("td:nth-child(" + g + ")").text();
                        try {
                            c = parseInt(c)
                        } catch (h) {
                            c = 0;
                            console.log("Err MergeRows Sum Function - " + h)
                        }
                        d += c
                    }
                }
                if (f > 1) {
                    b++
                } else {
                    b = 0
                }
            });
            jq("#" + a + " > .k-grid-footer .k-footer-template > td:nth-child(" + g + ")").text(d)
        }
    }, popup: function (k) {
        var b, c, d, o, n;
        var h = 0, g = [], l = 30, f = 30, m = 1, j = 1, a = 1, e = false;
        if (typeof k === "object") {
            k.url ? b = k.url : null;
            k.name ? c = k.name : null;
            k.width ? d = k.width : null;
            k.height ? o = k.height : null;
            k.top ? l = k.top : null;
            k.left ? f = k.left : null;
            k.toolbar ? m = k.toolbar : null;
            k.scrollbars ? j = k.scrollbars : null;
            k.resizable ? a = k.resizable : null;
            k.replace ? e = k.replace : null;
            if (d) {
                g[h] = "width=" + d;
                h++
            }
            if (o) {
                g[h] = "height=" + o;
                h++
            }
            if (l) {
                g[h] = "top=" + l;
                h++
            }
            if (f) {
                g[h] = "left=" + f;
                h++
            }
            if (typeof m === "number") {
                g[h] = "toolbars=" + m;
                h++
            }
            if (typeof j === "number") {
                g[h] = "scrollbars=" + j;
                h++
            }
            if (typeof a === "number") {
                g[h] = "resizable=" + a;
                h++
            }
            n = g.join()
        } else {
            b = k
        }
        window.open(b, c, n, e)
    }
};
jq(document).ready(function () {
    var a = jq("[jlamp-layout-interval]").val() ? parseInt(jq("[jlamp-layout-interval]").val()) * 1000 : undefined;
    if (a) {
        setInterval(checkCookie, a)
    }
});
jq(window).resize(function () {
});
var timeObj;

function doClientMsg(d) {
    var a = {direction: "down"};
    var b = 800;
    var c = 3000;
    if (timeObj) {
        clearTimeout(timeObj)
    }
    if (d) {
        jq("#info_msg").text("").text(d);
        jq("#info_msg_box").show("slide", a, b, function () {
            timeObj = setTimeout(doClientMsg, c)
        })
    } else {
        jq("#info_msg_box").hide("slide", a, b, function () {
        })
    }
}

function setFormAccessLog(b) {
    var a = "";
    jq.ajax({
        url: "/JLAMPCommon/setFormAccessLog_prc",
        data: {formData: JSON.stringify(b)},
        type: "post",
        dataType: "json",
        async: false,
        success: function (d, c, e) {
            if (d) {
                if (d.returnCode == 0) {
                    if (JLAMP.common.getDevicePlatform() === JLAMP.devicePlatform.iOS || JLAMP.common.getDevicePlatform() === JLAMP.devicePlatform.Android) {
                        if (b.path != "") {
                            window.location = b.path + "?formKey=" + d.data.formKey
                        }
                    } else {
                        a = d.data.formKey
                    }
                }
            }
        },
        error: function (e, c, d) {
            if (JLAMP.common.getDevicePlatform() === JLAMP.devicePlatform.iOS && e.status == 0) {
                location.href = "jmobile://callErrorPage"
            } else {
                alert(d)
            }
        },
        complete: function (d, c) {
        }
    });
    return a
}

function getFormAccessInfo(a) {
    jq.ajax({
        url: "/JLAMPCommon/getSysGetFormAccessInfo_prc",
        data: {appID: a},
        type: "get",
        dataType: "json",
        async: false,
        success: function (c, b, d) {
            if (c) {
                jq("#formViewYN").val(c.data.form_view_yn);
                jq("#formPrintYN").val(c.data.form_print_yn);
                jq("#formSaveYN").val(c.data.form_save_yn);
                jq("#formDeleteYN").val(c.data.form_delete_yn)
            }
        }
    });
    return false
}

function checkCookie() {
    var a = jq("[jlamp-layout-loginkey]").val();
    if (!JLAMP.getCookie(a)) {
        doLogout(true)
    }
};